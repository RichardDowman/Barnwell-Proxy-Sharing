/**
 * Barnwell admin overlay: implements /api/settings (GET)
 * and /api/admin/settings (GET, PUT) with token check.
 * Listens on 127.0.0.1:8082
 */
const express = require('express');
const fs = require('fs');
const fsp = fs.promises;
const path = require('path');

const PORT = 8082;
const DATA_DIR = process.env.DATA_DIR || '/var/www/barnwell-proxy/data';
const ADMIN_TOKEN = process.env.ADMIN_TOKEN || '';

const SETTINGS_FILE = path.join(DATA_DIR, 'settings.json');

const app = express();
app.disable('x-powered-by');
app.use(express.json({ limit: '1mb' }));

function jsonError(res, code, error, detail) {
  res.status(code).json({ ok: false, error, detail: detail ?? null });
}

async function readJSONSafe(file, fallback = {}) {
  try {
    const buf = await fsp.readFile(file);
    const txt = buf.toString('utf8').replace(/^\uFEFF/, ''); // strip BOM
    return JSON.parse(txt);
  } catch {
    return fallback;
  }
}

async function writeJSONSafe(file, obj) {
  const tmp = file + '.tmp';
  await fsp.mkdir(path.dirname(file), { recursive: true });
  await fsp.writeFile(tmp, JSON.stringify(obj, null, 2) + '\n', 'utf8');
  await fsp.rename(tmp, file);
}

// Public read of settings
app.get('/api/settings', async (_req, res) => {
  const settings = await readJSONSafe(SETTINGS_FILE, {});
  res.json(settings);
});

// Token middleware
function requireAdmin(req, res, next) {
  const tok = req.header('X-Admin-Token') || '';
  if (!ADMIN_TOKEN || tok !== ADMIN_TOKEN) {
    return jsonError(res, 401, 'unauthorized', 'missing or invalid X-Admin-Token');
  }
  return next();
}

// Admin GET
app.get('/api/admin/settings', requireAdmin, async (_req, res) => {
  const settings = await readJSONSafe(SETTINGS_FILE, {});
  res.json(settings);
});

// Admin PUT
app.put('/api/admin/settings', requireAdmin, async (req, res) => {
  const incoming = req.body && typeof req.body === 'object' ? req.body : null;
  if (!incoming) return jsonError(res, 400, 'bad_request', 'JSON body required');

  // Optional: light shape guard
  if (!incoming.businessHours || !incoming.slotConfig) {
    return jsonError(res, 400, 'invalid_settings', { need: ['businessHours', 'slotConfig'] });
  }

  try {
    await writeJSONSafe(SETTINGS_FILE, incoming);
    res.json({ ok: true, saved: true });
  } catch (e) {
    jsonError(res, 500, 'persist_failed', String(e && e.message || e));
  }
});

app.use((req, res) => jsonError(res, 404, 'not_found', req.method + ' ' + req.url));

app.listen(PORT, '127.0.0.1', () => {
  console.log(`admin-overlay listening on 127.0.0.1:${PORT} (DATA_DIR=${DATA_DIR})`);
});
