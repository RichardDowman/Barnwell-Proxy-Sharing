#!/usr/bin/env node
/**
 * Minimal Star CloudPRNT queue server (standalone)
 * - Port: process.env.CLOUDPRNT_PORT (default 8091)
 * - Jobs dir: $DATA_DIR/cloudprnt/jobs
 * Endpoints the printer uses:
 *   GET  /cloudprnt/poll?printer=<id>&key=<secret>    -> JSON says where to fetch job
 *   GET  /cloudprnt/job/:id?key=<secret>              -> returns "text/plain" ticket
 *   DELETE /cloudprnt/job/:id?key=<secret>            -> delete after success
 * Admin (optional):
 *   POST /api/cloudprnt/enqueue {order_ref|override_text}  (X-Admin-Token)
 */
const fs = require('fs');
const path = require('path');
const express = require('express');

const DATA_DIR = process.env.DATA_DIR || '/var/www/barnwell-proxy/data';
const JOBS_DIR = path.join(DATA_DIR, 'cloudprnt', 'jobs');
const ORDERS_DIR = path.join(DATA_DIR, 'orders');
const PORT = parseInt(process.env.CLOUDPRNT_PORT || '8091', 10);
const ADMIN_TOKEN = (process.env.ADMIN_TOKEN || '').trim();
const CLOUDPRNT_SECRET = (process.env.CLOUDPRNT_SECRET || '').trim();
const BASE_URL = process.env.CLOUDPRNT_BASE_URL || `https://api.barnwellpizzandgrill.co.uk`;

fs.mkdirSync(JOBS_DIR, { recursive: true });

const app = express();
app.use(express.json({ limit: '1mb' }));

function ok(res, obj) { res.json(obj); }
function fail(res, code, detail) { res.status(400).json({ ok:false, error: code, detail }); }
function needSecret(req, res) {
  const key = (req.query.key || req.headers['x-cloudprnt-key'] || '').trim();
  if (!CLOUDPRNT_SECRET || key !== CLOUDPRNT_SECRET) { res.status(401).send('unauthorized'); return false; }
  return true;
}
function needAdmin(req, res) {
  const t = (req.headers['x-admin-token'] || '').trim();
  if (!ADMIN_TOKEN || t !== ADMIN_TOKEN) { res.status(401).json({ error:'unauthorized' }); return false; }
  return true;
}
function readJSON(file, fb=null){ try{ return JSON.parse(fs.readFileSync(file,'utf8')); }catch(_){ return fb; } }

// jobs
function listJobs() {
  return fs.readdirSync(JOBS_DIR)
    .filter(f=>f.endsWith('.json'))
    .map(f=>({ id: f.replace(/\.json$/,''), file: path.join(JOBS_DIR, f) }))
    .sort((a,b)=> fs.statSync(a.file).mtimeMs - fs.statSync(b.file).mtimeMs);
}
function loadJob(id){ return readJSON(path.join(JOBS_DIR, id + '.json'), null); }
function saveJob(id, obj){ fs.writeFileSync(path.join(JOBS_DIR, id + '.json'), JSON.stringify(obj,null,2)); }
function delJob(id){ try{ fs.unlinkSync(path.join(JOBS_DIR, id + '.json')); }catch(_){} }

// CloudPRNT poll response
function buildPollResponse(jobId) {
  const fetchUrl  = `${BASE_URL}/cloudprnt/job/${encodeURIComponent(jobId)}?key=${encodeURIComponent(CLOUDPRNT_SECRET)}`;
  const deleteUrl = `${BASE_URL}/cloudprnt/job/${encodeURIComponent(jobId)}?key=${encodeURIComponent(CLOUDPRNT_SECRET)}`;
  return {
    jobReady: true,
    mediaTypes: ["text/plain"],
    contentType: "text/plain",
    jobFetchUrl: fetchUrl,
    deleteMethod: "DELETE",
    jobDeleteUrl: deleteUrl,
    jobId: jobId
  };
}

// ENQUEUE (by order_ref or override_text)
app.post('/api/cloudprnt/enqueue', (req,res) => {
  if (!needAdmin(req,res)) return;
  const { order_ref, override_text } = req.body || {};
  if (!order_ref && !override_text) return fail(res,'bad_request','Provide order_ref or override_text');

  let text = String(override_text || '').trim();
  if (!text) {
    const orderFile = path.join(ORDERS_DIR, order_ref + '.json');
    const order = readJSON(orderFile, null);
    if (!order || !order.printable_receipt) return fail(res,'not_found','Order file missing or has no printable_receipt');
    text = String(order.printable_receipt);
  }

  const id = Date.now().toString(36) + '-' + Math.random().toString(36).slice(2,8);
  saveJob(id, { id, created_at: new Date().toISOString(), contentType:'text/plain', body:text });
  return ok(res, { ok:true, jobId: id });
});

// PRINTER poll
app.get('/cloudprnt/poll', (req,res) => {
  if (!needSecret(req,res)) return;
  const jobs = listJobs();
  if (!jobs.length) return res.status(204).end();
  const next = jobs[0].id;
  res.json(buildPollResponse(next));
});

// PRINTER fetches a job (text)
app.get('/cloudprnt/job/:id', (req,res) => {
  if (!needSecret(req,res)) return;
  const j = loadJob(req.params.id);
  if (!j) return res.status(404).send('not_found');
  res.setHeader('Content-Type', j.contentType || 'text/plain');
  res.send(j.body || '');
});

// PRINTER deletes job after successful print
app.delete('/cloudprnt/job/:id', (req,res) => {
  if (!needSecret(req,res)) return;
  delJob(req.params.id);
  res.json({ ok:true, deleted: true });
});

app.listen(PORT, () => {
  console.log(`cloudprnt server listening on :${PORT}, jobs dir ${JOBS_DIR}`);
});
